name: Sync Fork

env:
  ORIGINAL_OWNER: opentdp
  ORIGINAL_REPOSITORY: tdp-cloud
  UPSTREAM_BRANCH: main
  MY_BRANCH: main

on:
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Fetch Upstream
      run: |
        git remote add upstream https://github.com/${{ env.ORIGINAL_OWNER }}/${{ env.ORIGINAL_REPOSITORY }}.git
        git fetch upstream
        git checkout -b ${{ env.MY_BRANCH }} upstream/${{ env.UPSTREAM_BRANCH }}
        git reset --hard upstream/${{ env.UPSTREAM_BRANCH }}
      
  
    - name: Push Changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.MYGITHUB_TOKEN }}
        branch: ${{ env.MY_BRANCH }}
        force: true

  release:
    needs: sync
    runs-on: ubuntu-latest
    steps:

    - name: Install jq
      run: |
        sudo apt-get update
        sudo apt-get install -y jq gh
    
    - name: Get Latest Release
      id: latest_release
      run: |
        response=$(curl --silent "https://api.github.com/repos/${{ env.ORIGINAL_OWNER }}/${{ env.ORIGINAL_REPOSITORY }}/releases/latest")
        if [[ "$response" == *"Not Found"* ]]; then
          echo "No release found in the upstream repository. Skipping release creation."
          echo "skip=true" >> $GITHUB_ENV
        else
          echo "tag_name=$(echo $response | jq -r .tag_name)" >> $GITHUB_ENV
          echo "body=$(echo $response | jq -r @json .body)" >> $GITHUB_ENV
          echo "assets_url=$(echo $response | jq -r .assets_url)" >> $GITHUB_ENV
          echo "assets_count=$(echo $response | jq -r '.assets | length')" >> $GITHUB_ENV
          if [[ "${{ env.assets_count }}" == '0' ]]; then
            echo "No assets found in the upstream repository. Skipping release creation."
            echo "skip=true" >> $GITHUB_ENV
          fi
        fi

    - name: Check if release exists and is new
      id: check_release
      run: |
        if [[ "${{ env.skip }}" == 'false' ]]; then
          curl -f --silent "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.tag_name }}" > /dev/null
          if [[ "$?" -ne 0 ]]; then
            echo "New release found. Proceeding with release creation."
            echo "skip=false" >> $GITHUB_ENV
          else
            echo "Release already exists in the local repository. Skipping release creation."
            echo "skip=true" >> $GITHUB_ENV
          fi
        fi
      

    - name: Create Release
      id: create_release
      if: ${{ env.skip == 'false' }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MYGITHUB_TOKEN }}
      with:
        tag_name: ${{ env.tag_name }}
        release_name: Release ${{ env.tag_name }}
        body: ${{ env.body }}
        draft: false
        prerelease: false

    - name: Download and Upload Release Assets
      if: ${{ env.skip == 'false' }}
      run: |
        assets=$(curl --silent "${{ env.assets_url }}")
        asset_ids=$(echo $assets | jq -r '.[].id')
        for asset_id in $asset_ids; do
          asset=$(curl --silent "https://api.github.com/repos/${{ env.ORIGINAL_OWNER }}/${{ env.ORIGINAL_REPOSITORY }}/releases/assets/$asset_id")
          asset_url=$(echo $asset | jq -r '.browser_download_url')
          asset_name=$(echo $asset | jq -r '.name')
          curl -LJO $asset_url
          gh release upload ${{ env.tag_name }} $asset_name --repo ${{ github.repository }}
        done
